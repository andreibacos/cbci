- hosts: win2016-compute,win2016-cinder

  vars_files: 
    - zuul-params.yaml

  tasks:
    - name: Include variables from group_vars/windows
      include_vars: "group_vars/windows"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/devstack
      include_vars: "group_vars/devstack"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/devstack-{{ zuul_project | basename }}
      include_vars: "group_vars/devstack-{{ zuul_project | basename }}"
      failed_when: False
      tags: always 

    - name: Include variables from group_vars/devstack-{{ zuul_project | basename }}-{{ job_type }}
      include_vars: "group_vars/devstack-{{ zuul_project | basename }}-{{ job_type }}"
      failed_when: False
      when: job_type is defined
      tags: always

    - name: Include variables from group_vars/win2016-compute
      include_vars: "group_vars/win2016-compute"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/win2016-compute-{{ zuul_project | basename }}
      include_vars: "group_vars/win2016-compute-{{ zuul_project | basename }}"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/win2016-compute-{{ zuul_project | basename }}-{{ job_type }}
      include_vars: "group_vars/win2016-compute-{{ zuul_project | basename }}-{{ job_type }}"
      failed_when: False
      tags: always

    - name: Include variables from job_vars/{{ zuul_project | basename }}
      include_vars: "job_vars/{{ zuul_project | basename }}"
      failed_when: False
      tags: always

    - name: Include variables from job_vars/{{ zuul_project | basename }}-{{ job_type }}
      include_vars: "job_vars/{{ zuul_project | basename }}-{{ job_type }}"
      failed_when: False
      tags: always

    - name: Get log files
      shell: |
        if [ ! -d "{{ item.value.dest }}" ];then
            mkdir -p "{{ item.value.dest }}"
        fi
        smbclient "//{{ inventory_hostname }}/C\$" -c "prompt OFF; cd {{ item.value.src }}" -U "administrator%Passw0rd"
        if [ $? -ne 0 ];then
            echo "Folder {{ item.value.src }} does not exists"
        else
            smbclient "//{{ inventory_hostname }}/C\$" -c "prompt OFF; recurse ON; lcd {{ item.value.dest }}; cd {{ item.value.src }}; mget *" -U "administrator%Passw0rd"
        fi
      args:
        executable: /bin/bash
      with_dict:
        log:
          dest: "{{ log_path }}/windows/logs/{{ hostname }}"
          src: '\openstack\log'
      ignore_errors: True
      delegate_to: 127.0.0.1

    - name: Get config files
      shell: |
        if [ ! -d "{{ item.value.dest }}" ];then
            mkdir -p "{{ item.value.dest }}"
        fi
        smbclient "//{{ inventory_hostname }}/C\$" -c "prompt OFF; cd {{ item.value.src }}" -U "administrator%Passw0rd"
        if [ $? -ne 0 ];then
            echo "Folder {{ item.value.src }} does not exists"
        else
            smbclient "//{{ inventory_hostname }}/C\$" -c "prompt OFF; recurse ON; lcd {{ item.value.dest }}; cd {{ item.value.src }}; mget *" -U "administrator%Passw0rd"
        fi
      args:
        executable: /bin/bash
      with_dict:
        log:
          dest: "{{ log_path }}/windows/confs/{{ hostname }}"
          src: '\openstack\etc'
      ignore_errors: True
      delegate_to: 127.0.0.1



- hosts: devstack
  vars_files: 
    - zuul-params.yaml

  tasks:
    - name: Include variables from group_vars/devstack
      include_vars: "group_vars/devstack"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/devstack-{{ zuul_project | basename }}
      include_vars: "group_vars/devstack-{{ zuul_project | basename }}"
      failed_when: False
      tags: always

    - name: Include variables from group_vars/devstack-{{ zuul_project | basename }}-{{ job_type }}
      include_vars: "group_vars/devstack-{{ zuul_project | basename }}-{{ job_type }}"
      failed_when: False
      when: job_type is defined
      tags: always

    - name: Include variables from job_vars/{{ zuul_project | basename }}
      include_vars: "job_vars/{{ zuul_project | basename }}"
      failed_when: False
      tags: always

    - name: Include variables from job_vars/{{ zuul_project | basename }}-{{ job_type }}
      include_vars: "job_vars/{{ zuul_project | basename }}-{{ job_type }}"
      failed_when: False
      tags: always

    - name: Export logs to {{ devstack_dir.stack }}/logs using journalctl
      shell: |
        for u in $(sudo systemctl list-unit-files | grep devstack | awk '{print $1}'); do
            name=$(echo $u | sed 's/devstack@//' | sed 's/\.service//')
            sudo journalctl -o short-precise --unit $u > {{ devstack_dir.stack }}/logs/$name.txt
        done
      ignore_errors: True

    - name: Create devstack folders
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      with_items:
        - "{{ log_path }}/devstack/logs"
        - "{{ log_path }}/devstack/conf"
        - "{{ log_path }}/tempest"
      ignore_errors: True
      delegate_to: 127.0.0.1

    - name: Dump pip list to file
      shell: pip list > /opt/stack/logs/pip-list.txt
      become: True
      ignore_errors: True

    - name: Dump OVS bridge config to file
      shell: ovs-vsctl -v show > /opt/stack/logs/ovs-bridges.txt
      become: True
      ignore_errors: True

    - name: Copy log files
      synchronize:
        mode: pull
        src: "{{ item }}"
        dest: "{{ log_path }}/devstack/logs"
        rsync_opts:
          - "--no-links"
      ignore_errors: True
      with_items:
        - /opt/stack/logs/
        - /var/log/cloud-init-output.log
        - /var/log/cloud-init.log
        - /var/log/syslog
        - /var/log/mysql/error.log
        
    - name: Copy conf files
      synchronize:
        mode: pull
        src: "{{ item }}"
        dest: "{{ log_path }}/devstack/conf"
        rsync_opts:
          - "--no-links"
      ignore_errors: True
      with_items:
        - /etc/neutron
        - /etc/nova
        - /etc/cinder
        - /etc/glance
        - /etc/keystone
        - /etc/swift
        - /etc/openvswitch

    - name: Copy tempest files
      synchronize:
        mode: pull
        src: "{{ item }}"
        dest: "{{ log_path }}/tempest"
        rsync_opts:
          - "--no-links"
      ignore_errors: True
      with_items:
        - /opt/stack/tempest/tempest.log
        - /opt/stack/tempest/etc/tempest.conf
        - /home/ubuntu/tempest/


- hosts: 127.0.0.1
  connection: local
  vars_files: 
    - zuul-params.yaml

  tasks:

    - name: Include variables from job_vars/{{ zuul_project | basename }}
      include_vars: "job_vars/{{ zuul_project | basename }}"
      failed_when: False
      tags: always

    - name: Include variables from job_vars/{{ zuul_project | basename }}-{{ job_type }}
      include_vars: "job_vars/{{ zuul_project | basename }}-{{ job_type }}"
      failed_when: False
      tags: always

    - name: Copy build files to log folder
      copy: 
        src: "{{ item }}"
        dest: "{{ log_path }}"
      with_fileglob:
        - "{{ work_dir }}/*.log"
      failed_when: False

    - name: Copy jenkins console log
      copy: 
        src: "{{ console_log }}"
        dest: "{{ log_path }}/jenkins-console.log"
      failed_when: False

    - name: Archive all files in {{ log_path }}
      shell: |
        for file in $(find "{{ log_path }}" -type f)
        do 
            gzip $file
        done
      failed_when: False

    - name: Set log destination for debug job
      set_fact: log_dst="/srv/logs/debug/{{ zuul_project | basename }}/{{ zuul_change }}/{{ zuul_patchset }}/{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"
      when: debug_job is defined and debug_job and job_type is not defined

    - name: Set log destination for debug job with job_type
      set_fact: log_dst="/srv/logs/debug/{{ zuul_project | basename }}/{{ zuul_change }}/{{ zuul_patchset }}/{{ job_type }}/{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"
      when: debug_job is defined and debug_job and job_type is defined

    - name: Set log destination for normal job
      set_fact: log_dst="/srv/logs/{{ zuul_project | basename }}/{{ zuul_change }}/{{ zuul_patchset }}"
      when: (debug_job is not defined or not debug_job) and job_type is not defined

    - name: Set log destination for normal job with job_type
      set_fact: log_dst="/srv/logs/{{ zuul_project | basename }}/{{ zuul_change }}/{{ zuul_patchset }}/{{ job_type }}"
      when: (debug_job is not defined or not debug_job) and job_type is defined

    - name: Make sure log server folder is empty
      shell: |
        ssh cloudbase@cloudbase-ci.com -i "{{ log_key }}" "if [ -d {{ log_dst }} ];then rm -rf {{ log_dst }};fi; mkdir -p {{ log_dst }}"

    - name: Upload logs
      shell: |
        rsync -av -e "ssh -i {{ log_key }}" "{{ log_path }}/" "cloudbase@cloudbase-ci.com:{{ log_dst }}"
