---
    - name: Install OVS
      win_package:
        path: "{{ ovs_msi_url }}"
        productid: '{A5CE0CD6-AABF-42AB-B52D-077492FF41A6}'
        ensure: present
      tags: configure-ovs

    - name: Expose tcp port for OVS for remote control
      win_service:
        name: ovsdb-server
        path: '"C:\Program Files\Cloudbase Solutions\Open vSwitch\bin\ovsdb-server.exe" --log-file="C:\Program Files\Cloudbase Solutions\Open vSwitch\logs\ovsdb-server.log" --pidfile --service --unixctl="C:\ProgramData\openvswitch\ovsdb-server.ctl" --remote=punix:"C:\ProgramData\openvswitch\db.sock" --remote=ptcp:6640 --remote=db:Open_vSwitch,Open_vSwitch,manager_options "C:\Program Files\Cloudbase Solutions\Open vSwitch\conf\conf.db"'

    - name: Restart ovsdb-server
      win_service:
        name: "ovsdb-server"
        state: restarted
        force_dependent_services: yes
      tags: configure-ovs

    - name: Restart ovs-vswitchd
      win_service:
        name: "ovs-vswitchd"
        state: restarted
        force_dependent_services: yes
      tags: configure-ovs

    - name: Remove {{ data_bridge }} vmswitch
      win_shell: "Remove-VMSwitch {{ data_bridge }}"
      tags: configure-ovs

    - name: Create {{ data_bridge }} vmswitch
      win_shell: "New-VMSwitch -Name {{ data_bridge }} -NetAdapterName ${{ compute_dataplane_interface_name }} -AllowManagementOS $false"
      tags: configure-ovs

    - name: Check if OVS extension is installed
      win_shell: 'Get-VMSwitchExtension -VMSwitchName {{ item.name }} -Name "Cloudbase Open vSwitch Extension"'
      register: result
      tags: configure-ovs

    - name: Enable OVS extension on {{ item.name }}
      win_shell: 'Enable-VMSwitchExtension -VMSwitchName {{ item.name }} -Name "Cloudbase Open vSwitch Extension"'
      when: result.rc == 0
      tags: configure-ovs

    - name: Add {{ data_bridge_ovs }} in OVS
      win_shell: "ovs-vsctl --db=tcp:127.0.0.1:6640 add-br {{ data_bridge_ovs }}"
      tags: configure-ovs

    - name: Add dataplane interface in {{ data_bridge_ovs }}
      win_shell: "ovs-vsctl --db=tcp:127.0.0.1:6640 add-port {{ data_bridge_ovs }} {{ compute_dataplane_interface_name }}"
      tags: configure-ovs

    - name: Enable {{ data_bridge_ovs }} adapter
      win_shell: "Enable-NetAdapter {{ data_bridge_ovs }}"
      tags: configure-ovs

    - name: Add dataplane interface ip on {{ data_bridge_ovs }}
      win_shell: "New-NetIPAddress -IPAddress {{ compute_local_ip }} -InterfaceAlias {{ data_bridge_ovs }} -PrefixLength 22"
      tags: configure-ovs

    # - name: Create br-ethernet bridge in OVS
      # win_shell: "ovs-vsctl --db=tcp:127.0.0.1:6640 add-br br-ethernet"

    # - name: Add dataplane interface in br-ethernet
      # win_shell: "ovs-vsctl --db=tcp:127.0.0.1:6640 add-port br-ethernet \"Ethernet 2\""

    # - name: Enable br-ethernet adapter
      # win_shell: "Enable-NetAdapter br-ethernet"

    # - name: Add IP Address on br-ethernet
      # win_shell: "New-NetIPAddress -IPAddress {{ compute_local_ip }} -InterfaceAlias br-ethernet -PrefixLength 22"

    # - name: Add configure-ovs-bridge ps script
      # win_template:
        # src: windows/configure-ovs-bridge.ps1
        # dest: "{{ win_dir.tmp }}\\configure-ovs-bridge.ps1"

    # - name: Run configure-ovs-bridge ps script
      # win_shell: "{{ win_dir.tmp }}\\configure-ovs-bridge.ps1"

    # - name: Create {{ data_bridge }}
      # openvswitch_bridge:
        # bridge: "{{ data_bridge }}"
        # state: present
      # tags: configure-ovs

    # - name: Retrieve data network interface
      # win_shell: '(Get-NetIPAddress -AddressFamily ipv4 | Where-Object {$_.IPAddress -match "192.168.0"}|Select-Object InterfaceAlias).InterfaceAlias'
      # register: interface
      # tags: configure-ovs

    # - name: interface debug
      # debug:
        # msg: "interface name: {{ interface.stdout }}"

    # - name: Get IP address of data interface
      # win_shell: "(Get-NetIPAddress -AddressFamily ipv4 |Where-Object {$_.InterfaceAlias -match \"{{ interface.stdout }}\"}|Select-Object IPAddress).IPAddress"
      # register: interface_ip

    # - name: interface_ip debug
      # debug:
        # msg: "interface_ip: {{ interface_ip.stdout }}"

    # - name: Add the port in {{ data_bridge }}
      # openvswitch_port:
        # bridge: "{{ data_bridge }}"
        # port: "{{ interface.stdout }}"
        # state: present
      # tags: configure-ovs
    
    # - name: Enable {{ data_bridge }}
      # win_shell: "Enable-NetAdapter {{ data_bridge }}"
    
    # - name: Add IP address of bridge
      # win_shell: "New-NetIPAddress -IPAddress {{ interface_ip.stdout }} -InterfaceAlias {{ data_bridge }} -PrefixLength 22"
