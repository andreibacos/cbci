---
  - name: Upload zuul clonemap file
    win_copy:
      dest: "{{ win_dir.build }}\\clonemap.yaml"
      src: files/zuul-clonemap.yaml
    tags: prepare-git-repos 

  - name: "Set zuul-cloner command for head only (no applied change)"
    set_fact:
      zuul_cloner_command: 'zuul-cloner --workspace {{ win_dir.build }} -m {{ win_dir.build }}\\clonemap.yaml
                           --zuul-url {{ zuul_url }} --zuul-branch {{ zuul_branch }}  
                           {{ git_server }} {{ git_prep_projects | join(" ") }}'
    when: zuul_head_only and zuul_head_only is defined
    tags: prepare-git-repos

  - name: "Set zuul-cloner command for project: {{ zuul_project }} ref: {{ zuul_ref }}"
    set_fact:
      zuul_cloner_command: 'zuul-cloner --workspace {{ win_dir.build }} -m {{ win_dir.build }}\\clonemap.yaml
                            --zuul-project {{ zuul_project }} --zuul-ref {{ zuul_ref }}
                            --zuul-url {{ zuul_url }} --zuul-branch {{ zuul_branch }}  
                            {{ git_server }} {{ git_prep_projects | join(" ") }}'
    when: not zuul_head_only or zuul_head_only is not defined
    tags: prepare-git-repos

  # zuul-cloner outputs on stderr, if we redirect 2>&1 the command always fails
  # we disable failure here to be able to write the log file in the next task and fail there if necessary
  - name: Run zuul-cloner
    win_shell: "{{ zuul_cloner_command }}"
    register: zuul_cloner_out
    failed_when: False
    tags: prepare-git-repos

  - name: Write zuul-cloner log file
    win_copy: 
      dest: "{{ win_dir.log }}\\zuul-cloner.log"
      content: '{{ zuul_cloner_out | to_nice_json }}'
    tags: prepare-git-repos

  # print zuul-cloner output only when it fails
  - name: Print zuul output when it fails
    debug: var=zuul_cloner_out
    when: zuul_cloner_out.rc != 0
    tags: prepare-git-repos

  # fail the task if zuul-cloner if necessary
  - name: Fail task if zuul cloner had any errors
    fail:
      msg: "Failed zuul-cloner"
    when: zuul_cloner_out.rc != 0
    tags: prepare-git-repos

  - name: Applying cherry-picks
    cb_cherry_pick:
      url: "{{ git_server }}/{{ item.project }}"
      ref: "{{ item.patches }}"
      path: "{{ item.path }}"
    register: cherry_pick_output
    with_items: "{{ cherry_picks }}"
    when: cherry_picks is defined
    tags: cherry-pick

  - name: Write cherry-picks log file
    win_copy:
      dest: "{{ win_dir.log }}\\cherry-picks.log"
      content: '{{ cherry_pick_output | to_nice_json }}'
    when: cherry_picks is defined
    tags: cherry-pick
